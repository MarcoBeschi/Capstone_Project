package com.TourViaggi.controller;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.TourViaggi.entity.Attivita;
import com.TourViaggi.entity.Localita;
import com.TourViaggi.entity.Prenotazione;
import com.TourViaggi.entity.User;
import com.TourViaggi.payload.PrenotazioneRequest;
import com.TourViaggi.repository.LocalitaRepository;
import com.TourViaggi.repository.PrenotazioneRepository;
import com.TourViaggi.repository.UserRepository;
import com.TourViaggi.service.AttivitaService;
import com.TourViaggi.service.LocalitaServiceImpl;

@RestController
@RequestMapping("/api/localita")
public class LocalitaController {

  private final LocalitaServiceImpl localitaService;
  private final LocalitaRepository localitaRepository;
  private final AttivitaService attivitaService; // Aggiungiamo l'attivitaService all'autowired

  @Autowired
  private UserRepository userRepository;
  @Autowired
  private PrenotazioneRepository prenotazioneRepository;
  @Autowired
  public LocalitaController(LocalitaServiceImpl localitaService, LocalitaRepository localitaRepository, AttivitaService attivitaService) {
    this.localitaService = localitaService;
    this.localitaRepository = localitaRepository;
    this.attivitaService = attivitaService;
  }
  
  @GetMapping("/{id}")
  public ResponseEntity<Localita> getLocalitaById(@PathVariable Long id) {
      Optional<Localita> localitaOpt = localitaRepository.findByIdWithAttivita(id);
      if (localitaOpt.isPresent()) {
          Localita localita = localitaOpt.get();
          localita.getAttivita().forEach(a -> a.setLocalita(null));
          localita.getAttivita().forEach(a -> a.setPrenotazioni(null)); 
          List<Attivita> attivita = attivitaService.getAttivitaByLocalitaId(id); // chiama il metodo sull'autowired
          localita.setAttivita(attivita);
          return new ResponseEntity<>(localita, HttpStatus.OK);
      }
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
  }
  @GetMapping("")
  public ResponseEntity<List<Localita>> getAllLocalita() {
      List<Localita> localitaList = localitaService.getAllLocalita();
      for (Localita localita : localitaList) {
          localita.setAttivita(null);
          localita.setPrenotazioni(null);
          
      }
      return new ResponseEntity<>(localitaList, HttpStatus.OK);
  }
  private User getCurrentUser() {
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    String currentUserEmail = authentication.getName();
	    System.out.println("Current email: " + currentUserEmail); // Aggiungi questa riga per stampare l'email
	    return userRepository.findByEmail(currentUserEmail).orElseThrow(() -> new RuntimeException("User not found"));
	}
  
  @PostMapping("/{id}/prenotazioni")
  public ResponseEntity<?> prenotaLocalita(@PathVariable("id") Long id, @RequestBody PrenotazioneRequest prenotazioneRequest) {
      Optional<Localita> optionalLocalita = localitaRepository.findById(id);
      if (optionalLocalita.isPresent()) {
          Localita localita = optionalLocalita.get();
          User user = getCurrentUser();

          Prenotazione prenotazione = new Prenotazione();
          prenotazione.setUser(user);
          prenotazione.setLocalita(localita);
          DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
          LocalDateTime dateTime = LocalDateTime.parse(prenotazioneRequest.getDataPrenotazione(), formatter);
          Timestamp timestamp = Timestamp.valueOf(dateTime);
          prenotazione.setDataPrenotazione(timestamp);
          prenotazione.setNumPartecipanti(prenotazioneRequest.getNumPartecipanti());
          prenotazione.setGiorniTour(prenotazioneRequest.getGiorniTour());

          prenotazioneRepository.save(prenotazione);
          return ResponseEntity.ok().build();
      } else {
          return ResponseEntity.notFound().build();
          
      }
  }

  }
